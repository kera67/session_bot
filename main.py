import attr
import telebot
import json
from attrs import define
from telebot import types
from datetime import datetime
import schedule
import time
import httplib2
import googleapiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials

kera_id = 314168780
arm_id = "-1001970375444_13"
with open('auth2.txt', 'r') as file:
    data = json.load(file)

# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ID –∑–Ω–∞—á–µ–Ω–∏–µ spreadsheetId
spreadsheetId = data['spreadsheetId']
telebot_api = data['telebot_api']

bot = telebot.TeleBot(telebot_api)

CREDENTIALS_FILE = 'auth2.txt'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å –∑–∞–∫—Ä—ã—Ç—ã–º –∫–ª—é—á–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ
# –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE,
                                                               ['https://www.googleapis.com/auth/spreadsheets',
                                                                'https://www.googleapis.com/auth/drive'])

httpAuth = credentials.authorize(httplib2.Http())  # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
service = googleapiclient.discovery.build('sheets', 'v4', http=httpAuth)  # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ 4 –≤–µ—Ä—Å–∏—é API


@define
class Session:
    # user_data: list[str]
    post_number: int = 1
    post_statuses: list[str] = attr.field(factory=list)  # ####################
    time: datetime = attr.field(factory=datetime.now)
    num_session: int = 0
    brigadier: str = ''
    line_comment: str = ''
    brigade_comment: str = ''


sessions = {}


def get_session(user_id):
    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Session –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if user_id in sessions:
        return sessions[user_id]
    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Session –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    else:
        sessions[user_id] = Session()
        return sessions[user_id]


def delete_session(user_id):
    if user_id in sessions:
        del sessions[user_id]


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–¥–∞" –∏ "–Ω–µ—Ç"
markup_yes_no = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
markup_yes_no.add("üü¢", "üî¥")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–µ—Ä–≤–∞—è" –∏ "–í—Ç–æ—Ä–∞—è"
markup_one_two = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
markup_one_two.add("–ü–µ—Ä–≤–∞—è", "–í—Ç–æ—Ä–∞—è")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–∏–≥–∞–¥–∏—Ä–∞–º–∏
markup_who_open = types.InlineKeyboardMarkup()
item1 = types.InlineKeyboardButton("–ì—Ä–æ—Å—Å—É –ï. –ê.", callback_data="–ì—Ä–æ—Å—Å—É –ï. –ê.")
item2 = types.InlineKeyboardButton("–ö–Ω—è–∑–µ–≤ –í. –ö.", callback_data="–ö–Ω—è–∑–µ–≤ –í. –ö.")
item3 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π...", callback_data="–î—Ä—É–≥–æ–π...")
markup_who_open.add(item1, item2, item3)


@bot.message_handler(commands=['checklist'])
def open_shift(message):
    bot.send_message(message.chat.id, "–ö—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É?", reply_markup=markup_who_open)


@bot.message_handler(commands=['get_chat_id'])
def get_chat_id(message):
    bot.send_message(message.chat.id, f"{message.chat}")


@bot.callback_query_handler(func=lambda call: True)
def check_name(call):
    session = get_session(call.message.chat.id)
    if call.data in ["–ì—Ä–æ—Å—Å—É –ï. –ê.", "–ö–Ω—è–∑–µ–≤ –í. –ö."]:
        bot.send_message(call.message.chat.id, f"–°–º–µ–Ω—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç {call.data}.")
        session.brigadier = call.data
        bot.send_message(call.message.chat.id, "–ö–∞–∫–∞—è —Å–º–µ–Ω–∞‚ùì", reply_markup=markup_one_two)
        bot.register_next_step_handler(call.message, check_num_session)
    elif call.data == "–î—Ä—É–≥–æ–π...":
        bot.send_message(call.message.chat.id, "–ö—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, get_name)


def get_name(message):
    session = get_session(message.chat.id)
    session.brigadier = message.text
    bot.send_message(message.chat.id, f"C–º–µ–Ω—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç {message.text}.")
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Å–º–µ–Ω–∞‚ùì", reply_markup=markup_one_two)
    bot.register_next_step_handler(message, check_num_session)


def check_num_session(message):
    session = get_session(message.chat.id)
    if message.text == '–ü–µ—Ä–≤–∞—è' or message.text == '1':
        session.num_session = 1
        check_post(message, 1)
    elif message.text == '–í—Ç–æ—Ä–∞—è' or message.text == '2':
        session.num_session = 2
        check_post(message, 1)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–∫—Ä–∏–ø—Ç–∞. –ö–∞–∫—É—é —Å–º–µ–Ω—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º? ", reply_markup=markup_one_two)
        bot.register_next_step_handler(message, check_num_session)


def check_post(message, post):
    post_names = {
        1: "–ü–æ–¥–¥–æ–Ω—ã",
        2: "–¢–æ—Ä—Ü–æ–≤–∫–∞",
        3: "–ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        4: "–§–æ—Ä–º–æ–≤–∫–∞",
        5: "–ú–µ—à–∞–ª–∫–∞",
        6: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å",
        7: "–•–∏–º–∏—è",
        8: "–ü–µ—Ä–ª–∏—Ç"
    }
    post_name = post_names.get(post, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç")
    bot.send_message(message.chat.id, f"–ü–æ—Å—Ç {post_name}. \n–ß–∏—Å—Ç–æ?", reply_markup=markup_yes_no)
    bot.register_next_step_handler(message, check_post_status)


def check_post_status(message):
    session = get_session(message.chat.id)
    if message.text == "üî¥":
        bot.send_message(message.chat.id, "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=None)
        bot.register_next_step_handler(message, get_comment)
    elif message.text == "üü¢":
        bot.send_message(message.chat.id, f"üü¢ –ü–æ—Å—Ç {session.post_number}")
        session.post_statuses.append("üü¢")
        if session.post_number < 8:
            session.post_number += 1
            check_post(message, session.post_number)
        else:
            session.post_number = 1
            get_line_comment(message)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–∫—Ä–∏–ø—Ç–∞. ", reply_markup=None)
        check_post(message, session.post_number)


def get_comment(message):
    session = get_session(message.chat.id)
    bot.send_message(message.chat.id, f"üî¥ –ü–æ—Å—Ç {session.post_number} - {message.text}.")
    session.post_statuses.append(f"üî¥ {message.text}")
    if session.post_number < 8:
        session.post_number += 1
        check_post(message, session.post_number)
    else:
        session.post_number = 1
        get_line_comment(message)


def get_line_comment(message):
    bot.send_message(message.chat.id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ª–∏–Ω–∏–∏?", reply_markup=None)
    bot.register_next_step_handler(message, get_brigade_comment)


def get_brigade_comment(message):
    session = get_session(message.chat.id)
    session.line_comment = message.text
    bot.send_message(message.chat.id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ –±—Ä–∏–≥–∞–¥—ã?")
    bot.register_next_step_handler(message, append_session)

def append_session(message):
    user_id = message.chat.id
    session = get_session(user_id)
    session.brigade_comment = message.text
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    session.time = now
    service.spreadsheets().values().append(
        spreadsheetId=spreadsheetId,
        valueInputOption="USER_ENTERED",
        range="–õ–∏—Å—Ç1!B2",
        body={"values": [[session.time, session.num_session, session.brigadier, None,
                          *session.post_statuses[:8],
                          session.line_comment, session.brigade_comment]]}
    ).execute()
    bot.send_message(arm_id, f'{session.time}\n {session.num_session}-—è —Å–º–µ–Ω–∞\n –ë—Ä–∏–≥–∞–¥–∏—Ä: {session.brigadier}'
                             f'\n\n –ü–æ–¥–¥–æ–Ω—ã: {session.post_statuses[0]}\n –¢–æ—Ä—Ü–æ–≤–∫–∞: {session.post_statuses[1]}'
                             f'\n –ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {session.post_statuses[2]}\n –§–æ—Ä–º–æ–≤–∫–∞: {session.post_statuses[3]}'
                             f'\n –ú–µ—à–∞–ª–∫–∞: {session.post_statuses[4]}\n –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: {session.post_statuses[5]}'
                             f'\n –•–∏–º–∏—è: {session.post_statuses[6]}\n –ü–µ—Ä–ª–∏—Ç: {session.post_statuses[7]}'
                             f'\n\n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ª–∏–Ω–∏–∏: {session.line_comment}'
                             f'\n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –±—Ä–∏–≥–∞–¥–µ: {session.brigade_comment}\n')
    bot.send_message(message.chat.id, f"–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
    delete_session(user_id)
    # https://docs.google.com/spreadsheets/d/1ufeRhZB-8aUAxd2KE-7OGVrJU9zbq22UEA4y7mGZul4/edit#gid=0


def main():
    while True:
        try:
            bot.polling(non_stop=True, interval=0)
        except Exception:
            time.sleep(0.1)
            continue


if __name__ == '__main__':
    main()

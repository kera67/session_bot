import attr
import telebot
import json
from attrs import define
from telebot import types
from datetime import datetime
import time
import httplib2
import googleapiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials

kera_id = 314168780
arm_id = "-1001970375444_13"
with open('auth2.txt', 'r') as file:
    data = json.load(file)

# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ID –∑–Ω–∞—á–µ–Ω–∏–µ spreadsheetId
spreadsheetId = data['spreadsheetId']
telebot_api = data['telebot_api']

bot = telebot.TeleBot(telebot_api)

CREDENTIALS_FILE = 'auth2.txt'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å –∑–∞–∫—Ä—ã—Ç—ã–º –∫–ª—é—á–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ
# –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE,
                                                               ['https://www.googleapis.com/auth/spreadsheets',
                                                                'https://www.googleapis.com/auth/drive'])

httpAuth = credentials.authorize(httplib2.Http())  # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
service = googleapiclient.discovery.build('sheets', 'v4', http=httpAuth)  # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ 4 –≤–µ—Ä—Å–∏—é API


@define
class Session:
    # user_data: list[str]
    states: str = ''
    is_open: bool = True
    post_number: int = 1
    time: datetime = attr.field(factory=datetime.now)
    brigadier: str = ''
    num_session: int = 0
    post_statuses: list[str] = attr.field(factory=list)  # ####################
    comment: str = ''


@define
class SessionClose:
    states: str = ''
    num_session: int = 1
    brigadier: str = ''
    lot: str = ''
    details: dict = attr.ib(factory=dict)
    details_prep: dict = attr.ib(factory=dict)
    pallets: int = 0
    cement: int = 0
    perlite: int = 0
    line_comment: str = ''
    brigade_comment: str = ''

    def __attrs_post_init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–µ—Ç–∞–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.details = {
            '–ê–ü-9': 0,
            '–ê–ü-12': 0,
            '–í–∞-9': 0,
            '–í–ê-12': 0
        }
        self.details_prep = {
            '–ê–ü-9': 0,
            '–ê–ü-12': 0,
            '–í–∞-9': 0,
            '–í–ê-12': 0
        }


sessions = {}
sessions_close = {}


def get_session(user_id):
    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Session –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if user_id in sessions and sessions[user_id].states != 'stopped':
        return sessions[user_id]
    elif user_id in sessions and sessions[user_id].states == 'stopped':
        sessions[user_id].states = ''
        get_help(user_id)
    else:
        sessions[user_id] = Session()
        return sessions[user_id]


def get_help(user_id):
    bot.send_message(user_id, "–ö–∞–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø—É—Å—Ç–∏–º?"
                              "\n\n/open - –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã  "
                              "\n\n/close - –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã "
                              "\n\n/workers - –ñ—É—Ä–ª–∞–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", reply_markup=types.ReplyKeyboardRemove())


def delete_session(user_id):
    if user_id in sessions:
        del sessions[user_id]


def get_session_close(user_id):
    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Session –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if user_id in sessions_close:
        return sessions_close[user_id]
    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Session –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    else:
        sessions_close[user_id] = SessionClose()
        return sessions_close[user_id]


def delete_session_close(user_id):
    if user_id in sessions_close:
        del sessions_close[user_id]


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–¥–∞" –∏ "–Ω–µ—Ç"
markup_yes_no = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
markup_yes_no.add("üü¢", "üî¥", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–µ—Ä–≤–∞—è" –∏ "–í—Ç–æ—Ä–∞—è"
markup_one_two = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
markup_one_two.add("–ü–µ—Ä–≤–∞—è", "–í—Ç–æ—Ä–∞—è", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
markup_details = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
markup_details.add("–ê–ü-9", "–ê–ü-12", "–í–∞-9", "–í–ê-12", "–î–∞–ª–µ–µ", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–∏–≥–∞–¥–∏—Ä–∞–º–∏
markup_who_open = types.InlineKeyboardMarkup()
item1 = types.InlineKeyboardButton("–ì—Ä–æ—Å—Å—É –ï. –ê.", callback_data="–ì—Ä–æ—Å—Å—É –ï. –ê.")
item2 = types.InlineKeyboardButton("–ö–Ω—è–∑–µ–≤ –í. –ö.", callback_data="–ö–Ω—è–∑–µ–≤ –í. –ö.")
item3 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π...", callback_data="–î—Ä—É–≥–æ–π...")
markup_who_open.add(item1, item2, item3)

markup_who_close = types.InlineKeyboardMarkup()
item1 = types.InlineKeyboardButton("–ì—Ä–æ—Å—Å—É –ï. –ê. ", callback_data="–ì—Ä–æ—Å—Å—É –ï. –ê. ")
item2 = types.InlineKeyboardButton("–ö–Ω—è–∑–µ–≤ –í. –ö. ", callback_data="–ö–Ω—è–∑–µ–≤ –í. –ö. ")
item3 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π. . .", callback_data="–î—Ä—É–≥–æ–π. . .")
markup_who_close.add(item1, item2, item3)


# @bot.message_handler(commands=['stop'])
# def stop(message):
#     try:
#         sessions[message.chat.id].states = 'stopped'
#         sessions_close[message.chat.id].states = 'stopped'
#     except Exception:
#         get_help[message.chat.id)


@bot.message_handler(commands=['start'])
def open_shift(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ–π –¥–ª—è "
                                      "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏–∏. –ú–Ω–æ–π –Ω–µ —Å–ª–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è "
                                      "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –∑–∞–ø—É—Å–∫–∞–π –∏—Ö –±–µ–∑ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏. –ó–∞–ø–∏—Å—å –≤ –∫–æ–Ω–µ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"
                                      " –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –ø–æ–∫–∞ –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–º —Ü–∏–∫–ª, –ø–æ—ç—Ç–æ–º—É —Å–º–µ–ª–æ –º–æ–∂–µ—à—å –Ω–∞–∂–∏–º–∞—Ç—å –∏ –ø–∏—Å–∞—Ç—å"
                                      " –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–µ—à—å, –∏ –ª—É—á—à–µ  —Å–º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å "
                                      "–∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é –∏ –Ω–µ –±–æ—è—Ç—å—Å—è, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ –ø–æ –ø–ª–∞–Ω—É. "
                                      "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —è –ø–æ–ø—Ä–æ—à—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å —Ç–æ–±–æ–π "
                                      "—Å–æ–±—Ä–∞–ª–∏, —á—Ç–æ –±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ, –∏ —Ç—ã —Å–∞–º –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—à—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ "
                                      "–≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å. –ï—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ "
                                      "–Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è - —è —Å–æ–æ–±—â—É—é. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –±—Ä–æ—Å–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ–ª –ø—É—Ç–∏,"
                                      "–∞ –µ—Å–ª–∏ –≤—Å–µ —Ç–∞–∫–∏ –Ω–∞–¥–æ –æ—Ç–º–µ–Ω–∏—Ç—å  –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–∏–º–∞–π –ø–æ —Å—Å—ã–ª–∫–∞–º")
    get_help(message.chat.id)


@bot.message_handler(commands=['open'])
def open_shift(message):
    bot.send_message(message.chat.id, "–ö—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É?", reply_markup=markup_who_open)


@bot.callback_query_handler(func=lambda call: True)
def check_name(call):
    session = get_session(call.message.chat.id)
    session_close = get_session_close(call.message.chat.id)
    if call.data in ["–ì—Ä–æ—Å—Å—É –ï. –ê.", "–ö–Ω—è–∑–µ–≤ –í. –ö."]:
        delete_session_close(call.message.chat.id)
        bot.send_message(call.message.chat.id, f"–°–º–µ–Ω—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç {call.data}.")
        session.brigadier = call.data
        bot.send_message(call.message.chat.id, "–ö–∞–∫–∞—è —Å–º–µ–Ω–∞‚ùì", reply_markup=markup_one_two)
        bot.register_next_step_handler(call.message, check_num_session)
    elif call.data == "–î—Ä—É–≥–æ–π...":
        delete_session_close(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–ö—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, get_name)
    elif call.data in ["–ì—Ä–æ—Å—Å—É –ï. –ê. ", "–ö–Ω—è–∑–µ–≤ –í. –ö. "]:
        delete_session(call.message.chat.id)
        bot.send_message(call.message.chat.id,
                         f"–°–º–µ–Ω—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç {call.data}.", reply_markup=types.ReplyKeyboardRemove())
        session_close.brigadier = call.data
        bot.send_message(call.message.chat.id, "–ö–∞–∫–∞—è —Å–º–µ–Ω–∞‚ùì", reply_markup=markup_one_two)
        bot.register_next_step_handler(call.message, check_num_session_close)
    elif call.data == "–î—Ä—É–≥–æ–π. . .":
        delete_session(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–ö—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, get_name_close)


def get_name(message):
    session = get_session(message.chat.id)
    session.brigadier = message.text
    bot.send_message(message.chat.id, f"C–º–µ–Ω—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç {message.text}.")
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Å–º–µ–Ω–∞‚ùì", reply_markup=markup_one_two)
    bot.register_next_step_handler(message, check_num_session)


def check_num_session(message):
    session = get_session(message.chat.id)
    if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        delete_session(message.chat.id)
        get_help(message.chat.id)
    elif message.text == '–ü–µ—Ä–≤–∞—è' or message.text == '1':
        session.num_session = 1
        check_post(message, 1)
    elif message.text == '–í—Ç–æ—Ä–∞—è' or message.text == '2':
        session.num_session = 2
        check_post(message, 1)


def check_post(message, post):
    post_names = {
        1: "–ü–æ–¥–¥–æ–Ω—ã",
        2: "–¢–æ—Ä—Ü–æ–≤–∫–∞",
        3: "–ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        4: "–§–æ—Ä–º–æ–≤–∫–∞",
        5: "–ú–µ—à–∞–ª–∫–∞",
        6: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å",
        7: "–•–∏–º–∏—è",
        8: "–ü–µ—Ä–ª–∏—Ç"
    }
    post_name = post_names.get(post, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç")
    bot.send_message(message.chat.id, f"–ü–æ—Å—Ç {post_name}. \n–ß–∏—Å—Ç–æ?", reply_markup=markup_yes_no)
    bot.register_next_step_handler(message, check_post_status)


def check_post_status(message):
    session = get_session(message.chat.id)
    if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        delete_session(message.chat.id)
        get_help(message.chat.id)
    elif message.text == "üî¥":
        bot.send_message(message.chat.id, "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=None)
        bot.register_next_step_handler(message, get_comment)
    elif message.text == "üü¢":
        bot.send_message(message.chat.id, f"üü¢ –ü–æ—Å—Ç {session.post_number}")
        session.post_statuses.append("üü¢")
        if session.post_number == 8:
            session.post_number = 1
            bot.register_next_step_handler(message, append_session)
            append_session(message)
        else:
            session.post_number += 1
            check_post(message, session.post_number)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–∫—Ä–∏–ø—Ç–∞. ", reply_markup=None)
        check_post(message, session.post_number)


def get_comment(message):
    session = get_session(message.chat.id)
    bot.send_message(message.chat.id, f"üî¥ –ü–æ—Å—Ç {session.post_number} - {message.text}.")
    session.post_statuses.append(f"üî¥ {message.text}")
    if session.post_number < 8:
        session.post_number += 1
        check_post(message, session.post_number)
    else:
        session.post_number = 1
        bot.register_next_step_handler(message, append_session)
        append_session(message)


def append_session(message):
    user_id = message.chat.id
    session = get_session(user_id)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    session.time = now
    try:
        bot.send_message(kera_id, f'{session.time}\n {session.num_session}-—è —Å–º–µ–Ω–∞\n –ë—Ä–∏–≥–∞–¥–∏—Ä: {session.brigadier}'
                                  f'\n\n –ü–æ–¥–¥–æ–Ω—ã: {session.post_statuses[0]}\n –¢–æ—Ä—Ü–æ–≤–∫–∞: {session.post_statuses[1]}'
                                  f'\n –ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {session.post_statuses[2]}\n –§–æ—Ä–º–æ–≤–∫–∞: {session.post_statuses[3]}'
                                  f'\n –ú–µ—à–∞–ª–∫–∞: {session.post_statuses[4]}\n –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: {session.post_statuses[5]}'
                                  f'\n –•–∏–º–∏—è: {session.post_statuses[6]}\n –ü–µ—Ä–ª–∏—Ç: {session.post_statuses[7]}')
        bot.send_message(message.chat.id, f"–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheetId,
            valueInputOption="USER_ENTERED",
            range="–û—Ç–∫—Ä—ã—Ç–∏–µ –°–º–µ–Ω—ã!B:B",
            body={"values": [[session.time, session.num_session, session.brigadier, None,
                              *session.post_statuses[:8], None, None]]}
        ).execute()
    except Exception as exx:
        bot.send_message(user_id, exx)
    delete_session(user_id)
    # https://docs.google.com/spreadsheets/d/1ufeRhZB-8aUAxd2KE-7OGVrJU9zbq22UEA4y7mGZul4/edit#gid=0


#######################################################################################################################
#######################################################################################################################


@bot.message_handler(commands=['close'])
def close_shift(message):
    bot.send_message(message.chat.id, "–ö—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É?", reply_markup=markup_who_close)


def get_name_close(message):
    session_close = get_session_close(message.chat.id)
    session_close.brigadier = message.text
    bot.send_message(message.chat.id, f"C–º–µ–Ω—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç {message.text}.")
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Å–º–µ–Ω–∞‚ùì", reply_markup=markup_one_two)
    bot.register_next_step_handler(message, check_num_session_close)


def check_num_session_close(message):
    session_close = get_session_close(message.chat.id)
    if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        delete_session_close(message.chat.id)
        get_help(message.chat.id)
    elif message.text == '–ü–µ—Ä–≤–∞—è' or message.text == '1':
        session_close.num_session = 1
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏:",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_lot)
    elif message.text == '–í—Ç–æ—Ä–∞—è' or message.text == '2':
        session_close.num_session = 2
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏:",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_lot)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–∫—Ä–∏–ø—Ç–∞. –ö–∞–∫—É—é —Å–º–µ–Ω—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º? ",
                         reply_markup=markup_one_two)
        bot.register_next_step_handler(message, check_num_session_close)


def get_lot(message):
    session_close = get_session_close(message.chat.id)
    if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        delete_session_close(message.chat.id)
        get_help(message.chat.id)
    else:
        session_close.lot = message.text
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –±—ã–ª–æ –Ω–∞—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ "
                                          "–∑–∞ —Å–º–µ–Ω—É.",
                         reply_markup=markup_details)
        bot.register_next_step_handler(message, get_details)


def get_details(message):
    detail = message.text
    session_close = get_session_close(message.chat.id)
    if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        delete_session_close(message.chat.id)
        get_help(message.chat.id)
    elif detail == '–î–∞–ª–µ–µ':
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –±—ã–ª–æ –Ω–∞—Ç–æ—Ä—Ü–æ–≤–∞–Ω–æ "
                                          "–∑–∞ —Å–º–µ–Ω—É.",
                         reply_markup=markup_details)
        bot.register_next_step_handler(message, get_details_pre)
    elif detail in session_close.details:
        bot.send_message(message.chat.id, f"–ö–æ–ª-–≤–æ –Ω–∞—Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω—ã—Ö {detail}: ",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_detail_count, detail)


def get_details_pre(message):
    detail = message.text
    if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        delete_session_close(message.chat.id)
        get_help(message.chat.id)
    elif detail == '–î–∞–ª–µ–µ':
        get_pallets(message)
    else:
        bot.send_message(message.chat.id, f"–ö–æ–ª-–≤–æ –Ω–∞—Ç–æ—Ä—Ü–æ–≤–∞–Ω–Ω—ã—Ö {detail}: ",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_detail_pre_count, detail)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–∞–ª–µ–π
def get_detail_count(message, detail):
    session_close = get_session_close(message.chat.id)
    try:
        count = int(message.text)
        session_close.details[detail] = count
        bot.send_message(message.chat.id,
                         f"{detail} –Ω–∞—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ {session_close.details[detail]}. "
                         f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–µ–ª—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–î–∞–ª–µ–µ'.",
                         reply_markup=markup_details)
        bot.register_next_step_handler(message, get_details)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_detail_count, detail)


def get_detail_pre_count(message, detail):
    session_close = get_session_close(message.chat.id)
    try:
        count = int(message.text)
        session_close.details_prep[detail] = count
        bot.send_message(message.chat.id,
                         f"{detail} –Ω–∞—Ç–æ—Ä—Ü–æ–≤–∞–Ω–æ {session_close.details_prep[detail]}. "
                         f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–µ–ª—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–î–∞–ª–µ–µ'.",
                         reply_markup=markup_details)
        bot.register_next_step_handler(message, get_details_pre)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_detail_pre_count, detail)


def get_pallets(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –ø–æ–¥–¥–æ–Ω–æ–≤ —Å–±–∏—Ç–æ? ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_cement)


def get_cement(message):
    session_close = get_session_close(message.chat.id)
    try:
        session_close.pallets = int(message.text)
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ü–µ–º–µ–Ω—Ç–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_perlite)
    except ValueError:
        bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑."
                                          "\n\n–°–∫–æ–ª—å–∫–æ –ø–æ–¥–¥–æ–Ω–æ–≤ —Å–±–∏—Ç–æ?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_cement)


def get_perlite(message):
    session_close = get_session_close(message.chat.id)
    try:
        session_close.cement = message.text
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–ª–∏—Ç–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ?",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_line_comment)
    except ValueError:
        bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑."
                                          "\n\n–°–∫–æ–ª—å–∫–æ —Ü–µ–º–µ–Ω—Ç–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ?",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_perlite)


def get_line_comment(message):
    session_close = get_session_close(message.chat.id)
    try:
        session_close.perlite = message.text
        bot.send_message(message.chat.id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ª–∏–Ω–∏–∏?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_brigade_comment)
    except ValueError:
        bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑."
                                          "\n\n–°–∫–æ–ª—å–∫–æ —Ü–µ–º–µ–Ω—Ç–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ?",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_line_comment)


def get_brigade_comment(message):
    session_close = get_session_close(message.chat.id)
    session_close.line_comment = message.text
    bot.send_message(message.chat.id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ –±—Ä–∏–≥–∞–¥—ã?")
    bot.register_next_step_handler(message, append_session_close)


def append_session_close(message):
    user_id = message.chat.id
    session_close = get_session_close(user_id)
    session_close.brigade_comment = message.text
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    bot.send_message(arm_id,
                         f'{now}\n {session_close.num_session}-—è —Å–º–µ–Ω–∞'
                              f'\n–ë—Ä–∏–≥–∞–¥–∏—Ä: {session_close.brigadier}'
                              f'\n\n–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏: {session_close.lot}'
                              f'\n\n  –§–æ—Ä–º–æ–≤–∫–∞:'
                              f'\n     –ê–ü-9: {session_close.details['–ê–ü-9']}'
                              f'\n     –ê–ü-12: {session_close.details['–ê–ü-12']}'
                              f'\n     –í–∞-9: {session_close.details['–í–∞-9']}'
                              f'\n     –í–ê-12: {session_close.details['–í–ê-12']}'
                              f'\n\n  –¢–æ—Ä—Ü–æ–≤–∫–∞:'
                              f'\n     –ê–ü-9: {session_close.details_prep['–ê–ü-9']}'
                              f'\n     –ê–ü-12: {session_close.details_prep['–ê–ü-12']}'
                              f'\n     –í–∞-9: {session_close.details_prep['–í–∞-9']}'
                              f'\n     –í–ê-12: {session_close.details_prep['–í–ê-12']}'
                              f'\n\n–ü–æ–¥–¥–æ–Ω–æ–≤ —Å–±–∏—Ç–æ: {session_close.pallets}'
                              f'\n–¶–µ–º–µ–Ω—Ç–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {session_close.cement}'
                              f'\n–ü–µ—Ä–ª–∏—Ç–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ {session_close.perlite}'
                              f'\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ª–∏–Ω–∏–∏: {session_close.line_comment}'
                              f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –±—Ä–∏–≥–∞–¥–µ: {session_close.brigade_comment}')
    service.spreadsheets().values().append(
        spreadsheetId=spreadsheetId,
        valueInputOption="USER_ENTERED",
        range="–ó–∞–∫—Ä—ã—Ç–∏–µ –°–º–µ–Ω—ã!A2",
        body={"values": [[session_close.time, session_close.num_session, session_close.brigadier, None,
                          session_close.lot, session_close.details['–ê–ü-9'], session_close.details['–ê–ü-12'],
                          session_close.details['–í–∞-9'], session_close.details['–í–ê-12'],
                          session_close.details_prep['–ê–ü-9'], session_close.details_prep['–ê–ü-12'],
                          session_close.details_prep['–í–∞-9'], session_close.details_prep['–í–ê-12'],
                          session_close.cement, session_close.perlite, session_close.pallets,
                          session_close.line_comment, session_close.brigade_comment]]}
    ).execute()
    delete_session_close(user_id)
    get_help(user_id)


def main():
    while True:
        try:
            bot.polling(non_stop=True, interval=0)
        except Exception:
            time.sleep(0.1)
            continue


if __name__ == '__main__':
    main()
